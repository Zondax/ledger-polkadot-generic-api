import { createAndServe } from '../src/server'
import axios, {Axios, AxiosError, isAxiosError} from 'axios'
import { describe } from 'node:test'
import http from 'http'

let app: http.Server | undefined
describe('basic api', () => {
  beforeAll(() => {
    app = createAndServe()
  })

  afterAll(() => {
    if (app) {
      app.close()
    }
  })

  test('get chains', async () => {
    const resp = await axios.get('http://127.0.0.1:3001/chains')

    expect(resp.status).toBe(200)
    expect(resp.data).not.toBe(undefined)
  })

  test('get chain props', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/node/props', { id: 'roc' })

    expect(resp.status).toBe(200)
    expect(resp.data).not.toBe(undefined)
  })

  test('get chain metadata', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/node/metadata', { id: 'roc' })

    expect(resp.status).toBe(200)
    expect(resp.data).not.toBe(undefined)
  })

  test('get chain metadata hash', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/node/metadata/hash', { id: 'roc' })

    expect(resp.status).toBe(200)
    expect(resp.data).not.toBe(undefined)
  })

  test('get tx metadata (with checkMetadataHash extension)', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/transaction/metadata', {
      txBlob:
        '00001c0c591bd5a5f69ae815f6aae85433bf5ef7e703cbb9c8b64bc69731252d4c0121710f001a0000006408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063eacb0ce6e825b73b46536726994c63f4684fd8a72976e07f551de5954f0df5cb501b6648e3f302d557ff1ee5e6d2462f2c668b1c4ac92db6a05c6ab857372c10a13',
      chain: { id: 'roc' },
    })

    expect(resp.status).toBe(200)
    expect(resp.data.txMetadata).toBe(
      '0x60082873705f72756e74696d65384d756c74695369676e6174757265011c4564323535313904001651010148656432353531393a3a5369676e6174757265007d02082873705f72756e74696d65384d756c74695369676e6174757265011c5372323535313904001651010148737232353531393a3a5369676e6174757265047d02082873705f72756e74696d65384d756c74695369676e617475726501144563647361040016b901014065636473613a3a5369676e6174757265087d0204184f7074696f6e0110536f6d650400160400047d0510306672616d655f73797374656d28657874656e73696f6e733c636865636b5f6d6f7274616c69747938436865636b4d6f7274616c697479000400168505010c4572618105102873705f72756e74696d651c67656e657269630c6572610c45726101244d6f7274616c32333204000300a103850510306672616d655f73797374656d28657874656e73696f6e732c636865636b5f6e6f6e636528436865636b4e6f6e6365000400110120543a3a4e6f6e63658905086870616c6c65745f7472616e73616374696f6e5f7061796d656e74604368617267655472616e73616374696f6e5061796d656e7400040013013042616c616e63654f663c543e8d0508746672616d655f6d657461646174615f686173685f657874656e73696f6e44436865636b4d6574616461746148617368000401106d6f646516950501104d6f6465910508746672616d655f6d657461646174615f686173685f657874656e73696f6e104d6f6465011c456e61626c6564000495050c1c73705f636f72651863727970746f2c4163636f756e7449643332000400160401205b75383b2033325d000003200000000304083c7072696d69746976655f74797065731048323536000400160401205b75383b2033325d0c0002031000031400000003480838726f636f636f5f72756e74696d652c52756e74696d6543616c6c011853797374656d040016b801ad0173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c53797374656d2c2052756e74696d653e00b40c306672616d655f73797374656d1870616c6c65741043616c6c011872656d61726b04011872656d61726b1610011c5665633c75383e00b80c2873705f72756e74696d65306d756c746961646472657373304d756c746941646472657373010849640400160001244163636f756e74496400f40c2873705f72756e74696d65306d756c746961646472657373304d756c7469416464726573730114496e64657804001501304163636f756e74496e64657804f40c2873705f72756e74696d65306d756c746961646472657373304d756c746941646472657373010c52617704001610011c5665633c75383e08f40c2873705f72756e74696d65306d756c746961646472657373304d756c74694164647265737301244164647265737333320400160401205b75383b2033325d0cf40c2873705f72756e74696d65306d756c746961646472657373304d756c74694164647265737301244164647265737332300400164801205b75383b2032305d10f400034000000003510100034100000003b901604e0800004f080000500800007c0b00007d0b0000660c00007e0c00007f0c0000800c0000820c00004106000042060000440600004506000074060000dd06000013070000340700003507000036070000370700003807000061070000d2070000190140d0e3a60bc0081c3b128f4b59f4f36fce637964ac88a483f393bc347e2cf2c9174d252347d44fbc336e54f775a9e18c94d8c5507a1741847c63c84b07b86ffcd15d59e300e37db1df68c58e25ccb5844c1e99f92556e5350e43a895e8a68aee177048829573d3be7fc180e3d1fcf89c9d216c557a5b6bed233683beb09031b29150addfdb7871ab3b8fe1617989d79cadbfbf4a18395ff6e36a47f33e7d5ea6ccae4df8cef4f7821789308d933604783168eaee9227abcbb71291f021463ff8350620514c4ac1c507900658e0974ea6253d25bd68e47d182b76bde0ba5f382a5b11f96580db6ea22014eda642584eb0a4b0a6c7729e644090ebbca3d9e706b7bc570e356ff73a3d14b6b31b6d479203cca4160faec678752c979cdf4444b2a9be46fb78654a4e119b627f9f517abff7861a14c416dde066cbb68579b84703fe92571f619e44c3b353e28e5767a9a2482218d217aec38a7d61ab73d658b1903f373095fc9ed721398289614edcab0df4975a1c8988623627f2b32e20442f1bad0054ba3a771a8701fa371677c99b9c0f838860ebf95e570ca9aeb980bce22ed9b5e004e784bd9adfca689b8e040a7ea58f58e4cf11c911ff258406adc598eb92bf50fe9f3c9c6af53edeb65176e68f3bdcb342e1a12a1a1a17b399057f8aeace1232dbe32821bd170c9687d0fdb8637e2ec73ac4d686aa236354d3399f3891d0257bc89a651b38ff85a00d86b455e5d6f8340e39cd7c7203c6f64e0bd430c0c57402ccfc40453e184b40bc86238306bc7ef4ebfec645eba8150d145503ddf731d53cfe4773394253ec3028b90910f933fe0e2bc89c094c28f1feba529cc046a1eee431a357fd9d413486fcaac0b1dc1ad93e344c827dee672e7d625e8da68ced657ff32497496d9d8d2984ea17ca635f6bcd30a0a022b77812ad3cd9e9684fd2fb7ffb10abea99b90962543faf81f4a4edfba7170e40dbf4752d2c0a26b762d60063f2e057b5db9c5791a00f8ae71467312b23064f631610c0af61b6535a73627cccec74aaa0e6bae25152af353736d745d2ffd4a90300e5e0ccfc3e48513df17f4a166fa95e272d056e7b9ee34fc014659b78e556c08466a121ca51a1730a41d713c5c3a56150055ef5df6936278bcd2f2c1526b4fe2672081e9fa3855a7a4d4b37ef316484d3d68500069926a66f8bc3d5f7e9a6fb271bfaaede8c0586ccfb170f99725cd1d47353400e367226cbbacf496df57cb668a35ef49de2a0015a6792a1d308d14a716c2393950d511e81f494c45080dc60234dcb225cae83ad5362fc70eac3a7bf12ece613164b86c22092c338e2f46406981ef7e6e51117b3de0b167f5a3f4723d3f7b3ea9a91fdce7474f4c06b452187cbe6bcc979118064e3d7d3814e151905ab6499c76ccb290d3cc9fa2f41bd00139140b7206e31ff9d98e4beef1d1a2e20bbc4a225773b9327590503729e589420b1a75d86eaabff22d7ce5d76d4656a74fa3e343ab4eb80d4212ff1e2099a42a828e49fae58e998245b09f1762cc8cef24c9dad98cef6946d17995bd30d13874e2942aab84a3a47c6abb4a93386d54893394185dd13c4dc6301f5c4a992d5c9e7bee268f970a9baccbdba990ed7f6d6300d9551d6c94639e67c725763a6f9d002d22c64b512fc0d2d6c3deab95bc432f3d69dc8b760f5615e3551d8dce671aab940fc9710ca415c35b7ea5b8797a42a22e9b91367aff359a80f0a9ce7163f16bd16804ee1e77f499eb932b6642b0a3cdb36e79afda7284e33aa4d7ee5c22b919c407e9911bc7d17ebdf98016d3d76a0de1dd9ba084205e532a7bcc815b559fd4f6176666c1383cbb5321e74768150f87c87e2fd113e0c8afbe2d9e10535987ed0a892ec34ff3b9fbee51d26d63065f4d033cd95377f7bdac439761952c119d7ac62d680095793642afe1dd2199b5cfbf04baeef748e3cf3e218c74cd5fdc328f7232eafc1fb2323eb5f39ca313a16a211bac0a412d4ed760f4774900f7852ebc8058bc020d798c9676950fae50f38fc0830938fa49fcabbb1a2e58a39e1bfdfa562f3e1cf8ba9dc8b59bbc3ee1c3794207da0275fb7e1ab8d1cccb116f2b4144040a31e024c7bdfdb877f02ac948c635c12f4c4370a75b7b3ea1a2e88f4ecd197d20d925eddd906079dffaf4214880731bea800e9054beb608043183ac9604567c4492eac0a5671311c3bd8629b760909753f716c72cf7d07cd2c9da0b0921f12488d3d91f9967e8cba23839d273f3f80dec3605f992502bd6ce26099ca2913763cc6019a3d70ce3100bd76244c3b0f6683bebe8d6c0a31bec1f959b686581ad3576393aa332166672cb5209a56be52c56699e9faf9429758f3cf4b098d9b84a84730df91cb86c0e329da73f7d95ee4974fc3904962541c29c55a213c489b1142b89ef72c09e7a13d54d26a15a9791304aca23cd430582e763810732c60f347720ddafdc520e2131da0cdd73227c73cc0edbb6c6df1519578e0803bfa9227acc39ea1e7292f43787e59957612f1074191beb6555447ab77d6621c6c860cb7301e724b7bce8293bfe7fddfc0464670ccf37116fb274f8393cbf36cfd9077be17661356f2ae8b8062d857000fb9ef0ce72b296004cb951440515066cbd5dcda894e7755cedc61dc0a2a7e2854929e8eeea77d6200f6575e9771d01933e1ab656c9b5c4bedd854a542017616a6fe9b8ef6a18a7db05ddf49c69c385da5a1b06575395d3eeb5c038ea7dcb554dc73a53d33593aa48ba429b1709f9c6fe90b901954f4bf7a353b41600f501a31ef1689cf320e884672ae2ad7e11f02f7aa4bd473876dbca1a855bb65755d0c7afacfe3947cb5963dc1a5ca1525c89d0b9e52b00286d2a971f6c3d87f97eb13ae4061804568b0873e96e4d989489363e1474cb3dac4239c764dc0788095558229be044883a7f0521b6a5255cdfb68f5e6417f96490ef06ba2a77cded47bbd9367c9f2758c92c42949fb632a6c39cf7f60f521940d5676e732b1df216515b235e6bab1f276134f07264cb2743b938cca1138c1ca7d2696ce3468f26238480bac732b67f1237425d479b7a4124e07a09629e2bc9c5f841bb54c8f22f30f52e7ff39061fb7780ea6d43e65db1c9451b6555069a9c3c9ba3639004dfb6e5a7f4cac8f0416f416b4167d022448436865636b4e6f6e5a65726f53656e646572151540436865636b5370656356657273696f6e150538436865636b547856657273696f6e150530436865636b47656e6573697315160c38436865636b4d6f7274616c697479168105160c28436865636b4e6f6e6365168905152c436865636b5765696768741515604368617267655472616e73616374696f6e5061796d656e74168d051544436865636b4d6574616461746148617368169105167d0521710f0018726f636f636f2a000c0c524f43',
    )
  })

  test('fail to get tx metadata', async () => {
    try {
      const resp = await axios.post('http://127.0.0.1:3001/transaction/metadata', {
        txBlob:
          '11001c0c591bd5a5f69ae815f6aae85433bf5ef7e703cbb9c8b64bc69731252d4c0121710f001a0000006408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063eacb0ce6e825b73b46536726994c63f4684fd8a72976e07f551de5954f0df5cb501b6648e3f302d557ff1ee5e6d2462f2c668b1c4ac92db6a05c6ab857372c10a13',
        chain: {id: 'roc'},
      })
    }catch(e:any){
        expect(isAxiosError(e)).toBe(true)
        expect(!!e.response).toBe(true)
        expect(!!e.response.data).toBe(true)
        if(e.response && e.response.data){
          expect(e.response.status).toBe(500)
          expect(e.response.data.errorMessage).toBe("failed to generate shortened metadata: [Failed to decode call: Could not find variant with index 17]")
        }
    }
  })

  test('flush chain metadata', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/node/metadata/flush', { id: 'roc' })
    expect(resp.status).toBe(200)
  })
})
