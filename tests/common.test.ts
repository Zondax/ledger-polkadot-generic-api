import { createAndServe } from '../src/server'
import axios, { isAxiosError } from 'axios'
import { describe } from 'node:test'
import http from 'http'

let app: http.Server | undefined
describe('basic api', () => {
  beforeAll(() => {
    app = createAndServe()
  })

  afterAll(() => {
    if (app) {
      app.close()
    }
  })

  test('get chains', async () => {
    const resp = await axios.get('http://127.0.0.1:3001/chains')

    expect(resp.status).toBe(200)
    expect(resp.data).not.toBe(undefined)
  })

  test('get chain props', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/node/props', { id: 'roc' })

    expect(resp.status).toBe(200)
    expect(resp.data).not.toBe(undefined)
  })

  test('get chain metadata', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/node/metadata', { id: 'roc' })

    expect(resp.status).toBe(200)
    expect(resp.data).not.toBe(undefined)
  })

  test('get chain metadata hash', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/node/metadata/hash', { id: 'roc' })

    expect(resp.status).toBe(200)
    expect(resp.data).not.toBe(undefined)
  })

  test('get tx metadata (with checkMetadataHash extension)', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/transaction/metadata', {
      txBlob:
        '00001c0c591bd5a5f69ae815f6aae85433bf5ef7e703cbb9c8b64bc69731252d4c0121710f001a0000006408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063eacb0ce6e825b73b46536726994c63f4684fd8a72976e07f551de5954f0df5cb501b6648e3f302d557ff1ee5e6d2462f2c668b1c4ac92db6a05c6ab857372c10a13',
      chain: { id: 'roc' },
    })

    expect(resp.status).toBe(200)
    expect(resp.data.txMetadata).toBe(
      '0x60082873705f72756e74696d65384d756c74695369676e6174757265011c4564323535313904001651010148656432353531393a3a5369676e6174757265007d02082873705f72756e74696d65384d756c74695369676e6174757265011c5372323535313904001651010148737232353531393a3a5369676e6174757265047d02082873705f72756e74696d65384d756c74695369676e617475726501144563647361040016b901014065636473613a3a5369676e6174757265087d0204184f7074696f6e0110536f6d65040016040004810510306672616d655f73797374656d28657874656e73696f6e733c636865636b5f6d6f7274616c69747938436865636b4d6f7274616c697479000400168905010c4572618505102873705f72756e74696d651c67656e657269630c6572610c45726101244d6f7274616c32333204000300a103890510306672616d655f73797374656d28657874656e73696f6e732c636865636b5f6e6f6e636528436865636b4e6f6e6365000400110120543a3a4e6f6e63658d05086870616c6c65745f7472616e73616374696f6e5f7061796d656e74604368617267655472616e73616374696f6e5061796d656e7400040013013042616c616e63654f663c543e910508746672616d655f6d657461646174615f686173685f657874656e73696f6e44436865636b4d6574616461746148617368000401106d6f646516990501104d6f6465950508746672616d655f6d657461646174615f686173685f657874656e73696f6e104d6f6465011c456e61626c6564000499050c1c73705f636f72651863727970746f2c4163636f756e7449643332000400160401205b75383b2033325d000003200000000304083c7072696d69746976655f74797065731048323536000400160401205b75383b2033325d0c0002031000031400000003480838726f636f636f5f72756e74696d652c52756e74696d6543616c6c011853797374656d040016b801ad0173656c663a3a73705f6170695f68696464656e5f696e636c756465735f636f6e7374727563745f72756e74696d653a3a68696464656e5f696e636c7564653a3a64697370617463680a3a3a43616c6c61626c6543616c6c466f723c53797374656d2c2052756e74696d653e00b40c306672616d655f73797374656d1870616c6c65741043616c6c011872656d61726b04011872656d61726b1610011c5665633c75383e00b80c2873705f72756e74696d65306d756c746961646472657373304d756c746941646472657373010849640400160001244163636f756e74496400f40c2873705f72756e74696d65306d756c746961646472657373304d756c7469416464726573730114496e64657804001501304163636f756e74496e64657804f40c2873705f72756e74696d65306d756c746961646472657373304d756c746941646472657373010c52617704001610011c5665633c75383e08f40c2873705f72756e74696d65306d756c746961646472657373304d756c74694164647265737301244164647265737333320400160401205b75383b2033325d0cf40c2873705f72756e74696d65306d756c746961646472657373304d756c74694164647265737301244164647265737332300400164801205b75383b2032305d10f400034000000003510100034100000003b901604d0800004e0800004f080000800b0000810b00006a0c0000820c0000830c0000840c0000860c00004306000044060000460600004706000076060000df06000015070000360700003707000038070000390700003a07000063070000d10700001901ad540083ba99ea8f9ddb2730062dd94d512a334816504164f43cc2df6df5f18c81c6a879f13a1507a6baeb3831079629be9e40dbe1e60ff36a741ed4361ff7427da6a4aaee85cb95d8e5044a2df61cfbc6808751daa68ff07987965ca964deb8d6632db993a0f9fffcec0147d4a824739715a88ccf5f9759230f45f307bd5408efcdb39a481125177577a5fa8040b3ed56be00a671f1409334fecf95e78607858e10654ca9da7bc6a503a634a99ddbaeb430e901906a07809f702138a47b07f42d2b899d32fec1dd9e6878c703009d51a0eb98693d88b583ab4459bd030625af279b8216b64552441950e74fddb45949f3423ac8d4e7926722dd6a8810a0c6d0fb16cb6bb0c3c0417471f128f4e39f1fc6ca163e110d2535eec8ee1ac8467f686590700a7f2cde5ba8f2643d2ee4cf6e53c041edd4f34a4a51d3ed0e7c81dbdb028113e32f3c2cd62033799e82b678641208ddaec299f9c83edeb30c44b5b68e8afa4e1bad4bdc10470b5b40affb5c2fbccd3518d5b7276822369e553d24079a037cee565e2fb9ac6374f8cd25e70cb7da33858ac151b441c675f3233443ea56d9a9d093151da5fac8cad1b9a1d41be5f9ff408e52ef06a9815696c4868d613ccb48bf0a745fed50d86f9e97e7e8d860b553183283ee79c29d00fd3086a6676a742d385f173628606a4deef01e161a5cd7aaefec962b82a9a0e450bfcf184db20c08d43d01deb4a034b1fb51846b5d9c2b78867f8a902fa02255ea8351455f5553cb3cf366ba0b3747ffcaf3431c282da0601cb02af1ecb9c513a6d9b7099b147d7e0b665312003b2cad8711070260a3519c0ee183facdf560190049ed20b411b8b196a8feefecada27468859cbd49a2b391fd724caed6881f80e97629b6160549cc7072721fab552f65a34a2f9bf5a2120e31a9c742e61b2574194cad7c8b493e4ed3b4a498e56049388ea5d9e1964b277ee928e13ab6c7ce8cacb99be0a2c5a483bd2d09d124c40bbd0173c87ea5e3e477bb819aeb5df1bb388333f6d438dc73b81c9e32e8898c320e54a3d947245d4d9209c8dc2a3fe8dd7928020e09b177fa5606d58f83e0622ba3c6061d769299b66b75e8a45f4ebc106fa3907f87b4a0c2f0d950084caa1ea3078d1dfcef7972b3dc96dc0b6c2082bb00e1a68c665ab9379687e7b95c3822c978d9d50608828cca496e9e1d9fe435ced5dd4ddf62567b42da14ea38a905f1251da0f5def4d7738787cee99a15d4c597f6e6019fb773eeecb8f297ef2d819f71cb6fef6cb0e613ef8868df5a60c377282b7b383f9b3072b86f87e3baf7e6ed20331dcea26d5a0c6d455e36afd4356a3bcd2a182a013163d3814e151905ab6499c76ccb290d3cc9fa2f41bd00139140b7206e31ff9d98e4beef1d1a2e20bbc4a225773b9327590503729e589420b1a75d86eaabff22d7ceea7a024d18bea5369999f4b625993a2f3310854ab751a0f7864f01728e9c5df5afbdbe72d35e480d91798beb1d6cbff676358d90a3117ea3304e75f4b2a84e1487f8d40cb35b9456cd97fe95394b860627ae32451527de642a883416afb45a4cad681a1a04db66a6e8acdc92e41956ea9af79f073594592f90162f1122dce1468488cefea97d7f1d26a89ec1ebff1d54482120dd54df2b96dc19f2f19b0d0d7cc6d888be8211ec99ee8e94fd926f3364decd6d814703b86f0b273ad0af509030eab95bc432f3d69dc8b760f5615e3551d8dce671aab940fc9710ca415c35b7eaaa20934cfa1e001e9f3f6ca8f5365f6e26198288f8e956090ef28c8e927f48818faa8caa7540a49c33feb4b8a592fb2fa850c9eeb195622952e638c6355ec7f0baf441d713543512bca893d51b0f7eca64a8eb5a821cb9c968c700b9fecc9172fae50f38fc0830938fa49fcabbb1a2e58a39e1bfdfa562f3e1cf8ba9dc8b59bb4085307d54da73c265a6da53a9b1f8f2abdd321ba53c5b76fc831c34eac90b9159ca5605cf49178661d100f8f3edbdf66c0508cb742374b7ae4df5a8f68be7a29d997273f45ba309a409d590e33ac0ffb384bbde07a5786044d0e9bc518ebfbb23df65c20ef3fe410a1e6126870d13324187a00e4ec8acddbffc9999f2ae84e637a55bfcf6b281e85f77967ce10582cd752be56250157a77c88c6869d23d9102282902734194cf7ad5540f5bd3c8559a16ef6b9989fc12f62f31acf5233b4268bbc7cdafd8c05ce56833820fa38fea15691978d00bb30da17f50d5954d536460d8629b760909753f716c72cf7d07cd2c9da0b0921f12488d3d91f9967e8cba23cb0f63425e1f6d15883201520fcee6e9e4179733a6e76c798b8ae5831b77b694a6e6aef07610ef85e2fd459a7ee149ffbbfe0c4d673c2bb5292ea0963f6bb7c412808ed5f9d6d8bd0ecce2590ff5ccf85fd57475c8758690081e1751340ea28f239efe5cd14815ae8ca8fba837ff430e26a1da87c426c2fd60885d9dfbdf7ee36a15a9791304aca23cd430582e763810732c60f347720ddafdc520e2131da0cda38a7b08eb8416791a3e86b75029aa91b5d826f92bf2873e951f4ebd9a7c7384d03bb7661375840b873f6391490cc19730b3e3a0da33934485734f1144c04fe29510d0840117ea6c4a00914ac103473d3ecddfdda403398eb90b004f7ade1cbd54929e8eeea77d6200f6575e9771d01933e1ab656c9b5c4bedd854a542017616b3048f8ba1c9a2a324b5096e63e49aac9d629077187c0e4dacdc57004047f31ee910cbd7119e7ae665fe4dd17938469ab6db32e18464e3b71aca0896e2fc3825a4b698da24a591a1414ed040b23b50c6d4b8219fe9a2f2023a14527b0495907231b59863e84f17435b01839f913c70cb7032a7e20530c336e0d7d48062c0f9b55eef5a133672d86cadc706ed6a712a5b9b432b9a310e138f4ffa657a7e3a15fb5790c306e405caddbe84fc5ca3d8f2b0985e8685c85bea29d8336a952f26d5356ed925bcd8b5f010e6776712056f118ffe09e1d9ef4242be8defe0bb46c380b859a780a11fc2edc90eae5e17d44fa5466f29202cac75906a9e51389aae44ed7a27a30c055466b70870193353a71299791dadb53e83854c607dce8933bb198ce9dd49c30b837a236981f8334e46dbef3425a09953bc8e71e0767e52a1e2e59dd80416f416b4167d022448436865636b4e6f6e5a65726f53656e646572151540436865636b5370656356657273696f6e150538436865636b547856657273696f6e150530436865636b47656e6573697315160c38436865636b4d6f7274616c697479168505160c28436865636b4e6f6e6365168d05152c436865636b5765696768741515604368617267655472616e73616374696f6e5061796d656e741691051544436865636b4d6574616461746148617368169505168105f0780f0018726f636f636f2a000c0c524f43',
    )
  })

  test('fail to get tx metadata', async () => {
    try {
      const resp = await axios.post('http://127.0.0.1:3001/transaction/metadata', {
        txBlob:
          '11001c0c591bd5a5f69ae815f6aae85433bf5ef7e703cbb9c8b64bc69731252d4c0121710f001a0000006408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063eacb0ce6e825b73b46536726994c63f4684fd8a72976e07f551de5954f0df5cb501b6648e3f302d557ff1ee5e6d2462f2c668b1c4ac92db6a05c6ab857372c10a13',
        chain: { id: 'roc' },
      })
    } catch (e: any) {
      expect(isAxiosError(e)).toBe(true)
      expect(!!e.response).toBe(true)
      expect(!!e.response.data).toBe(true)
      if (e.response && e.response.data) {
        expect(e.response.status).toBe(500)
        expect(e.response.data.errorMessage).toBe(
          'failed to generate shortened metadata: [Failed to decode call: Could not find variant with index 17]',
        )
      }
    }
  })

  test('flush chain metadata - lowercase', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/node/metadata/flush', { id: 'roc' })
    expect(resp.status).toBe(200)
  })

  test('flush chain metadata - uppercase', async () => {
    const resp = await axios.post('http://127.0.0.1:3001/node/metadata/flush', { id: 'ROC' })
    expect(resp.status).toBe(200)
  })
})
